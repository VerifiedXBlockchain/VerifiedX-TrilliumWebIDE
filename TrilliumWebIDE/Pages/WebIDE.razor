@page "/webide"

<div class="row-cols-md-8">
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Trillium Web IDE (tIDE)</h3>
        <div class="row">
            <div>
                <p>
                    Trillium can be tested completely on the web-based IDE called tIDE.
                </p>
                <br />
                <p>
                    The Web IDE has all the tools the console has and more to come!
                </p>
                <br />
                <ul>
                    <li>
                        Live Compile and Runtime execution of code 
                    </li>
                    <li>
                        Lots of Resources and Examples 
                    </li>
                    <li>
                        Code saving for upload to VFX Network
                    </li>
                </ul>
                <br />
                 <p>
                    Things coming soon are the following:
                </p>
                 <br />
                <ul>
                    <li>
                        User stored trlm sketches.
                    </li>
                    <li>
                        Trlm sketch repo for all users
                    </li>
                    <li>
                        Live chat to communicate with other devs
                    </li>
                </ul>
                <br />
            </div>
        </div>
    </RadzenCard>
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">A Basic Program</h3>
        <div class="row">
            <RadzenImage Path="images/trilliumwebide.png" Style="width: 90%;"></RadzenImage>
            <br />
            <p>
                Above we have a simple 'Hello World' program. The main thing to point out is the web IDE can handle fully typed functions and then call those functions.
                We have the following things in this program:
            </p>
            <br />
                <ul style="margin-left:17px;">
                    <li>
                        Function
                    </li>
                    <li>
                        Function input paramater of a string
                    </li>
                    <li>
                        Function return type of a string
                    </li>
                    <li>
                        variable declaration of a string
                    </li>
                    <li>
                        return of newly declared variable
                    </li>
                    <li>
                        Calling the function of 'helloWorld()' with 'Trillium' as the paramter input.
                    </li>
                </ul>
            <br />

            <div style="width:60%;">
<textarea id="code" name="code" readonly="readonly" style="width:60%;">
function helloWorld(name : string) : string
{
    var result = "Hello " + name
    return result
}</textarea>
            </div>
            <br />
            <br />
            <p>
                As seen in the screenshot if you send <span style="color:darkturquoise;">helloWorld("Trillium")'</span> the ide output will be: <span style="color:darkturquoise;">Hello Trillium</span>.
            </p>
        </div>
    </RadzenCard>

    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Video Intro to Web IDE</h3>
        <video class="w-100" id="tintrovideo" style="max-width: 800px;" controls="controls" _bl_796fa517-712e-4cf5-b8d6-7a4d940f2947="">
            <source src="videos/tintro.mp4" type="video/mp4">
        </video>
    </RadzenCard>
</div>


@code {
    [Inject] private IJSRuntime _js { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await _js.InvokeVoidAsync("highlightSnippet");
        if(firstRender)
        {
            var output = await _js.InvokeAsync<string>("highlightSnippet");
            await InvokeAsync( StateHasChanged );
        }

    }
}
